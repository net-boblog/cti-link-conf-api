<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tinet.ctilink.conf.model.AgentTelMapper" >
  <resultMap id="BaseResultMap" type="com.tinet.ctilink.conf.model.AgentTel" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="enterprise_id" property="enterpriseId" jdbcType="INTEGER" />
    <result column="agent_id" property="agentId" jdbcType="INTEGER" />
    <result column="tel" property="tel" jdbcType="VARCHAR" />
    <result column="tel_type" property="telType" jdbcType="INTEGER" />
    <result column="area_code" property="areaCode" jdbcType="VARCHAR" />
    <result column="is_validity" property="isValidity" jdbcType="INTEGER" />
    <result column="is_bind" property="isBind" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, enterprise_id, agent_id, tel, tel_type, area_code, is_validity, is_bind, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from cti_link_agent_tel
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from cti_link_agent_tel
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tinet.ctilink.conf.model.AgentTel" useGeneratedKeys="true" keyProperty="id" >
    insert into cti_link_agent_tel (enterprise_id, agent_id, tel, 
      tel_type, area_code, is_validity, 
      is_bind, create_time)
    values (#{enterpriseId,jdbcType=INTEGER}, #{agentId,jdbcType=INTEGER}, #{tel,jdbcType=VARCHAR}, 
      #{telType,jdbcType=INTEGER}, #{areaCode,jdbcType=VARCHAR}, #{isValidity,jdbcType=INTEGER}, 
      #{isBind,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.tinet.ctilink.conf.model.AgentTel" useGeneratedKeys="true" keyProperty="id" >
    insert into cti_link_agent_tel
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="enterpriseId != null" >
        enterprise_id,
      </if>
      <if test="agentId != null" >
        agent_id,
      </if>
      <if test="tel != null" >
        tel,
      </if>
      <if test="telType != null" >
        tel_type,
      </if>
      <if test="areaCode != null" >
        area_code,
      </if>
      <if test="isValidity != null" >
        is_validity,
      </if>
      <if test="isBind != null" >
        is_bind,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="enterpriseId != null" >
        #{enterpriseId,jdbcType=INTEGER},
      </if>
      <if test="agentId != null" >
        #{agentId,jdbcType=INTEGER},
      </if>
      <if test="tel != null" >
        #{tel,jdbcType=VARCHAR},
      </if>
      <if test="telType != null" >
        #{telType,jdbcType=INTEGER},
      </if>
      <if test="areaCode != null" >
        #{areaCode,jdbcType=VARCHAR},
      </if>
      <if test="isValidity != null" >
        #{isValidity,jdbcType=INTEGER},
      </if>
      <if test="isBind != null" >
        #{isBind,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tinet.ctilink.conf.model.AgentTel" >
    update cti_link_agent_tel
    <set >
      <if test="enterpriseId != null" >
        enterprise_id = #{enterpriseId,jdbcType=INTEGER},
      </if>
      <if test="agentId != null" >
        agent_id = #{agentId,jdbcType=INTEGER},
      </if>
      <if test="tel != null" >
        tel = #{tel,jdbcType=VARCHAR},
      </if>
      <if test="telType != null" >
        tel_type = #{telType,jdbcType=INTEGER},
      </if>
      <if test="areaCode != null" >
        area_code = #{areaCode,jdbcType=VARCHAR},
      </if>
      <if test="isValidity != null" >
        is_validity = #{isValidity,jdbcType=INTEGER},
      </if>
      <if test="isBind != null" >
        is_bind = #{isBind,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tinet.ctilink.conf.model.AgentTel" >
    update cti_link_agent_tel
    set enterprise_id = #{enterpriseId,jdbcType=INTEGER},
      agent_id = #{agentId,jdbcType=INTEGER},
      tel = #{tel,jdbcType=VARCHAR},
      tel_type = #{telType,jdbcType=INTEGER},
      area_code = #{areaCode,jdbcType=VARCHAR},
      is_validity = #{isValidity,jdbcType=INTEGER},
      is_bind = #{isBind,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <sql id="PostgresqlPaging" >
    <if test="page != null" >
      limit #{page.size} offset #{page.start}
    </if>
  </sql>
  <sql id="tableNameSql" >
     cti_link_agent_tel 
  </sql>
  <select id="searchListByCondition" resultMap="BaseResultMap" parameterType="com.tinet.ctilink.core.util.Condition" >
    select 
    <include refid="Base_Column_List" />
    from  
    <include refid="tableNameSql" />
    <include refid="varSqlByCondition" />
    <if test="sortBuilder != null and sortBuilder != ''" >
      order by ${sortBuilder} 
    </if>
  </select>
  <select id="getCountByCondition" resultType="INTEGER" parameterType="com.tinet.ctilink.core.util.Condition" >
    SELECT COUNT(*) FROM 
    <include refid="tableNameSql" />
    <include refid="varSqlByCondition" />
  </select>
  <delete id="deleteByCondition" parameterType="com.tinet.ctilink.core.util.Condition" >
    delete from 
    <include refid="tableNameSql" />
    <include refid="varSqlByCondition" />
  </delete>
  <sql id="varSqlByCondition" >
    <where >
      <foreach collection="conditions" item="item" >
        and ${item.name} 
        <choose >
          <when test="item.relation == 'like' or item.relation == 'not like'" >
            ${item.relation} '%${item.value}%' 
          </when>
          <when test="item.relation == 'in' or item.relation == 'not in' " >
            ${item.relation} (${item.value}) 
          </when>
          <when test="item.relation == 'is' or item.relation == 'is not'  " >
            ${item.relation} ${item.value} 
          </when>
          <otherwise >
            ${item.relation} #{item.value} 
          </otherwise>
        </choose>
      </foreach>
    </where>
  </sql>
</mapper>